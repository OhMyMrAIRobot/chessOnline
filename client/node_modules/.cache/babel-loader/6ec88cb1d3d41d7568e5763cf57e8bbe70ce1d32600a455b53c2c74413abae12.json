{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this._x = void 0;\n    this._y = void 0;\n    this._color = void 0;\n    this._figure = void 0;\n    this._board = void 0;\n    this._available = void 0;\n    this._id = void 0;\n    this._board = board;\n    this._x = x;\n    this._y = y;\n    this._color = color;\n    this._figure = figure;\n    this._available = false;\n    this._id = Math.random();\n  }\n  isEmpty() {\n    return this._figure === null;\n  }\n  isEnemy(target) {\n    if (target._figure) {\n      var _this$_figure;\n      return ((_this$_figure = this._figure) === null || _this$_figure === void 0 ? void 0 : _this$_figure._color) !== target._figure._color;\n    }\n    return false;\n  }\n  isEmptyVertical(target) {\n    if (this._x !== target._x) return false;\n    const min = Math.min(this._y, target._y);\n    const max = Math.max(this._y, target._y);\n    for (let y = min + 1; y < max; y++) {\n      if (!this._board.getCell(this._x, y).isEmpty()) return false;\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this._y !== target._y) return false;\n    const min = Math.min(this._x, target._x);\n    const max = Math.max(this._x, target._x);\n    for (let x = min + 1; x < max; x++) {\n      if (!this._board.getCell(x, this._y).isEmpty()) return false;\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(this._x - target._x);\n    const absY = Math.abs(this._y - target._y);\n    if (absX !== absY) return false;\n    const dy = this._y < target._y ? 1 : -1;\n    const dx = this._x < target._x ? 1 : -1;\n    for (let i = 1; i < absX; i++) {\n      if (!this._board.getCell(this._x + dx * i, this._y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    this._figure = figure;\n    this._figure._cell = this;\n  }\n  moveFigure(targetCell) {\n    var _this$_figure2;\n    if (this._figure && (_this$_figure2 = this._figure) !== null && _this$_figure2 !== void 0 && _this$_figure2.canMove(targetCell)) {\n      this._figure.moveFigure(targetCell);\n      targetCell.setFigure(this._figure);\n      this._figure = null;\n    }\n  }\n}","map":{"version":3,"names":["Cell","constructor","board","x","y","color","figure","_x","_y","_color","_figure","_board","_available","_id","Math","random","isEmpty","isEnemy","target","_this$_figure","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i","setFigure","_cell","moveFigure","targetCell","_this$_figure2","canMove"],"sources":["/Users/mrairobot/Desktop/main/ksis/Online_Chess/client/src/models/Cell.ts"],"sourcesContent":["import {Colors} from \"./Colors\";\nimport {Figure} from \"./figures/Figure\";\nimport {Board} from \"./Board\";\n\nexport class Cell{\n    readonly _x: number;\n    readonly _y: number;\n    readonly _color: Colors;\n    _figure: Figure | null;\n    _board: Board;\n    _available: boolean;\n    _id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this._board = board;\n        this._x = x;\n        this._y = y;\n        this._color = color;\n        this._figure = figure;\n        this._available = false;\n        this._id = Math.random()\n    }\n\n    isEmpty(): boolean {\n        return this._figure === null;\n    }\n\n    isEnemy(target: Cell): boolean {\n        if (target._figure){\n            return this._figure?._color !== target._figure._color;\n        }\n        return false;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if (this._x !== target._x)\n            return false;\n\n        const min = Math.min(this._y, target._y);\n        const max = Math.max(this._y, target._y);\n\n        for (let y = min + 1; y < max; y++){\n            if (!this._board.getCell(this._x, y).isEmpty())\n                return false;\n        }\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell): boolean {\n        if (this._y !== target._y)\n            return false;\n\n        const min = Math.min(this._x, target._x);\n        const max = Math.max(this._x, target._x);\n\n        for (let x = min + 1; x < max; x++){\n            if (!this._board.getCell(x, this._y).isEmpty())\n                return false;\n        }\n\n        return true;\n    }\n\n    isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(this._x - target._x);\n        const absY = Math.abs(this._y - target._y);\n        if (absX !== absY)\n            return false;\n\n        const dy = this._y < target._y ? 1 : -1;\n        const dx = this._x < target._x ? 1 : -1;\n\n        for (let i = 1; i < absX; i++){\n            if (!this._board.getCell(this._x + dx * i, this._y + dy * i).isEmpty())\n                return false;\n        }\n\n        return true;\n    }\n\n    setFigure(figure: Figure) {\n        this._figure = figure;\n        this._figure._cell = this;\n    }\n\n    public moveFigure(targetCell: Cell) {\n        if (this._figure && this._figure?.canMove(targetCell)){\n            this._figure.moveFigure(targetCell);\n            targetCell.setFigure(this._figure)\n            this._figure = null;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}